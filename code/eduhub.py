# -*- coding: utf-8 -*-
"""eduhub.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eTaWaraGQXgQXUoE6vPwI_RqQqQrOd3T
"""

# === Part 1: Database Setup and Data Modeling ===

## Step 1.1: Connect to MongoDB and Create Database
#loading neccessary libraries and dependencies
from pymongo import MongoClient
from datetime import datetime, timedelta
import pandas as pd
import random

# Connect to local MongoDB server
client = MongoClient('mongodb://localhost:27017/')

client.list_database_names()

# Createing database (6)
eduhub_db = client['eduhub_db']

## Step 1.2: Define Collections
users_collection = eduhub_db['users']
courses_collection = eduhub_db['courses']
enrollments_collection = eduhub_db['enrollments']
lessons_collection = eduhub_db['lessons']
assignments_collection = eduhub_db['assignments']
submissions_collection = eduhub_db['submissions']

"""# Generating Sample data"""

user_sample = {
    # MongoDB automatically generates "_id"
    "userId": "U001",
    "email": "john.doe@example.com",
    "firstName": "John",
    "lastName": "Doe",
    "role": "student",  # or "instructor"
    "dateJoined": datetime.utcnow(),
    "profile": {
        "bio": "Aspiring data analyst.",
        "avatar": "https://example.com/avatar/john.jpg",
        "skills": ["Python", "SQL", "Excel"]
    },
    "isActive": True
}

course_sample = {
    # "_id" is auto-generated by MongoDB
    "courseId": "C101",
    "title": "Intro to Python",
    "description": "A hands-on course for beginners learning Python.",
    "instructorId": "U002",
    "category": "Programming",
    "level": "beginner",
    "duration": 15,
    "price": 49.99,
    "tags": ["python", "coding", "beginner"],
    "createdAt": datetime.utcnow(),
    "updatedAt": datetime.utcnow(),
    "isPublished": True
}

enrollment_sample = {
    "enrollmentId": "E001",
    "userId": "U001",
    "courseId": "C101",
    "enrolledAt": datetime.utcnow(),
    "progress": 20
}

lesson_sample = {
    "lessonId": "L001",
    "courseId": "C101",
    "title": "Getting Started with Python",
    "content": "Text, links, or video URL for the lesson.",
    "duration": 30,
    "order": 1
}

assignment_sample = {
    "assignmentId": "A001",
    "courseId": "C101",
    "title": "Python Basics Quiz",
    "description": "Test your understanding of basic Python concepts.",
    "dueDate": datetime.utcnow(),
    "maxScore": 100,
    "createdAt": datetime.utcnow(),
    "updatedAt": datetime.utcnow(),
    "type": "quiz",
    "resources": [
        "https://docs.python.org/3/tutorial/",
        "https://realpython.com/"
    ]
}

submission_sample = {
    "submissionId": "S001",
    "assignmentId": "A001",
    "userId": "U001",
    "submittedAt": datetime.utcnow(),
    "grade": 85,
    "feedback": "Nice work! Keep going!"
}

"""## Inserting Sample Data into the Data
---
1. users.json – 20 users

2. courses.json – 8 courses

3. enrollments.json – 15 enrollments

4. lessons.json – 25 lessons

5. assignments.json – 10 assignments

6. submissions.json – 12 assignment submissions

This data was a json file used to populate the model
"""

#importing json library to load the json file
import json
#loading the users data
with open("Data/users.json", "r") as file:
    users_data = json.load(file)
    eduhub_db.users.insert_many(users_data)
    print(f'There are {len(users_data)} data loaded')

#loading the courses data
with open("Data/courses.json", "r") as file:
    course_data = json.load(file)
    eduhub_db.courses.insert_many(course_data)
    print(f'There are {len(course_data)} data loaded')

#loading the enrollments data
with open("Data/enrollments.json", "r") as file:
    enrollments_data = json.load(file)
    eduhub_db.enrollments.insert_many(enrollments_data)
    print(f'There are {len(enrollments_data)} data loaded')

#loading the lessons data
with open("Data/lessons.json", "r") as file:
    lessons_data = json.load(file)
    eduhub_db.lessons.insert_many(lessons_data)
    print(f'There are {len(lessons_data)} data loaded')

#loading the assignments data
with open("Data/assignments.json", "r") as file:
    assignments_data = json.load(file)
    eduhub_db.assignments.insert_many(assignments_data)
    print(f'There are {len(assignments_data)} data loaded')

#loading the submissions data
with open("Data/submissions.json", "r") as file:
    submissions_data = json.load(file)
    eduhub_db.submissions.insert_many(submissions_data)
    print(f'There are {len(submissions_data)} data loaded')

# Get all instructor userIds
instructors = {user["userId"] for user in eduhub_db.users.find({"role": "instructor"})}
print(instructors)

"""## Part 3: Basic CRUD Operations (25 points)
###
Task 3.1: Create Operations
Write Python code using PyMongo to:

Add a new student user
Create a new course
Enroll a student in a course
Add a new lesson to an existing course
"""

# adding a new student
new_user = {
    "user_id": "U1001",
    "name": "Jane Smith",
    "email": "jane.smith@example.com",
    "role": "student",
    "created_at": "2025-06-17T00:00:00Z"
}

result = users_collection.insert_one(new_user)
print(f"Inserted user with _id: {result.inserted_id}")

#creating new course
new_course = {
    "course_id": "C2001",
    "title": "Python for Beginners",
    "description": "An introductory Python course.",
    "category": "Programming",
    "level": "beginner",
    "duration": 8,
    "price": 30.0,
    "instructor_id": "U001",  # Example instructor ID
    "created_at": "2025-06-17T00:00:00Z"
}

result = courses_collection.insert_one(new_course)
print(f"Inserted course with _id: {result.inserted_id}")

#enroll a student in a course
new_enrollment = {
    "user_id": "U1001",
    "course_id": "C2001",
    "enrolled_at": "2025-06-17T00:00:00Z"
}

result = enrollments_collection.insert_one(new_enrollment)
print(f"Inserted enrollment with _id: {result.inserted_id}")

#adding a new lesson to an existing
new_lesson = {
    "lesson_id": "L3001",
    "course_id": "C2001",
    "title": "Lesson 1: Getting Started",
    "content": "Welcome to Python! In this lesson, we'll cover basics.",
    "created_at": "2025-06-17T00:00:00Z"
}

result = lessons_collection.insert_one(new_lesson)
print(f"Inserted lesson with _id: {result.inserted_id}")

# find active student
active_students = users_collection.find({"role": "student"})

for student in active_students:
    print(student)

get all courses with instructor details (simple version without aggregation)
instructors = users_collection.find({"role": "instructor"})
for instructor in instructors:
    print(f"Courses taught by {instructor['firstName']} {instructor['lastName']}:")
    instructor_courses = courses_collection.find({"instructorId": instructor["userId"]})
    for course in instructor_courses:
        print({
            "title": course["title"],
            "courseId": course["courseId"],
            "category": course["category"],
            "level": course["level"],
            "students_enrolled": enrollments_collection.count_documents({"courseId": course["courseId"]})
        })
    print()

